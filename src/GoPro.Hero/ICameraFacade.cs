using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using GoPro.Hero.Browser.FileSystem;

namespace GoPro.Hero
{
    public interface ICameraFacade
    {
        ICamera Camera();
        T Camera<T>() where T:class,ICamera;

        bool AutoLowLight();
        ICameraFacade AutoLowLight(bool state);
        Task<bool> AutoLowLightAsync();
        Task AutoLowLightAsync(bool state);

        int AvailablePhotoSpace();
        Task<int> AvailablePhotoSpaceAsync();
        TimeSpan AvailableVideoSpace();
        Task<TimeSpan> AvailableVideoSpaceAsync();

        byte BatteryStatus();
        Task<byte> BatteryStatusAsync();

        BeepSound BeepSound();
        ICameraFacade BeepSound(BeepSound beepSound);
        Task<BeepSound> BeepSoundAsync();
        Task BeepSoundAsync(BeepSound beepSound);

        Node Browse();
        BurstRate BurstRate();
        ICameraFacade BurstRate(BurstRate burstRate);
        Task<BurstRate> BurstRateAsync();
        Task BurstRateAsync(BurstRate burstRate);
        ContinuousShot ContinuousShot();
        ICameraFacade ContinuousShot(ContinuousShot continuousShot);
        Task<ContinuousShot> ContinuousShotAsync();
        Task ContinuousShotAsync(ContinuousShot continuousShot);
        Mode DefaultModeOnPowerOn();
        ICameraFacade DefaultModeOnPowerOn(Mode mode);
        Task<Mode> DefaultModeOnPowerOnAsync();
        Task DefaultModeOnPowerOnAsync(Mode mode);
        ICameraFacade DeleteAllFilesOnSdCard();
        Task DeleteAllFilesOnSdCardAsync();
        ICameraFacade DeleteLastFileOnSdCard();
        Task DeleteLastFileOnSdCardAsync();
        FieldOfView FieldOfView();
        ICameraFacade FieldOfView(FieldOfView fieldOfView);
        Task<FieldOfView> FieldOfViewAsync();
        Task FieldOfViewAsync(FieldOfView fieldOfView);
        FrameRate FrameRate();
        ICameraFacade FrameRate(FrameRate frameRate);
        Task<FrameRate> FrameRateAsync();
        Task FrameRateAsync(FrameRate frameRate);
        string FullName();
        Task<string> FullNameAsync();
        LedBlink LedBlink();
        ICameraFacade LedBlink(LedBlink ledBlink);
        Task<LedBlink> LedBlinkAsync();
        Task LedBlinkAsync(LedBlink ledBlink);
        bool LivePreview();
        ICameraFacade LivePreview(bool state);
        Task<bool> LivePreviewAsync();
        Task LivePreviewAsync(bool state);
        bool LivePreviewAvailable();
        Task<bool> LivePreviewAvailableAsync();
        bool Locate();
        ICameraFacade Locate(bool state);
        Task<bool> LocateAsync();
        Task LocateAsync(bool state);
        LoopingVideo LoopingVideo();
        ICameraFacade LoopingVideo(LoopingVideo loopingVideo);
        Task<LoopingVideo> LoopingVideoAsync();
        Task LoopingVideoAsync(LoopingVideo loopingVideo);
        Mode Mode();
        ICameraFacade Mode(Mode mode);
        Task<Mode> ModeAsync();
        Task ModeAsync(Mode mode);
        Orientation Orientation();
        ICameraFacade Orientation(Orientation orientation);
        Task<Orientation> OrientationAsync();
        Task OrientationAsync(Orientation orientation);
        int PhotoCount();
        Task<int> PhotoCountAsync();
        PhotoInVideo PhotoInVideo();
        ICameraFacade PhotoInVideo(PhotoInVideo photoInVideo);
        Task<PhotoInVideo> PhotoInVideoAsync();
        Task PhotoInVideoAsync(PhotoInVideo photoInVideo);
        PhotoResolution PhotoResolution();
        ICameraFacade PhotoResolution(PhotoResolution resolution);
        Task<PhotoResolution> PhotoResolutionAsync();
        Task PhotoResolutionAsync(PhotoResolution resolution);
        bool Power();
        Task<bool> PowerAsync();
        ICameraFacade Power(bool power);
        Task PowerAsync(bool power);
        bool Protune();
        ICameraFacade Protune(bool state);
        Task<bool> ProtuneAsync();
        Task ProtuneAsync(bool state);
        bool Shutter();
        Task<bool> ShutterAsync();
        ICameraFacade Shutter(bool state);
        Task ShutterAsync(bool state);
        SignalStrength SignalStrength();
        Task<SignalStrength> SignalStrengthAsync();
        bool SpotMeter();
        ICameraFacade SpotMeter(bool state);
        Task<bool> SpotMeterAsync();
        Task SpotMeterAsync(bool state);
        bool SupportsAutoLowLight();
        bool SupportsProtune();
        TimeLapse TimeLapse();
        ICameraFacade TimeLapse(TimeLapse timeLapse);
        Task<TimeLapse> TimeLapseAsync();
        Task TimeLapseAsync(TimeLapse timeLapse);
        IEnumerable<bool> ValidAutoLowLight();
        IEnumerable<FieldOfView> ValidFieldOfView();
        IEnumerable<FrameRate> ValidFrameRate();
        IEnumerable<LoopingVideo> ValidLoopingVideo();
        IEnumerable<PhotoResolution> ValidPhotoResolution();
        IEnumerable<bool> ValidProtune();
        IEnumerable<VideoResolution> ValidVideoResolution();
        IEnumerable<WhiteBalance> ValidWhiteBalance();
        int VideoCount();
        Task<int> VideoCountAsync();
        VideoResolution VideoResolution();
        ICameraFacade VideoResolution(VideoResolution resolution);
        Task<VideoResolution> VideoResolutionAsync();
        Task VideoResolutionAsync(VideoResolution resolution);
        VideoStandard VideoStandard();
        ICameraFacade VideoStandard(VideoStandard videoStandard);
        Task<VideoStandard> VideoStandardAsync();
        Task VideoStandardAsync(VideoStandard videoStandard);
        WhiteBalance WhiteBalance();
        ICameraFacade WhiteBalance(WhiteBalance whiteBalance);
        Task<WhiteBalance> WhiteBalanceAsync();
        Task WhiteBalanceAsync(WhiteBalance whiteBalance);

        ICameraFacade Chain(params Func<ICameraFacade, Task>[] fs);
        ICameraFacade Chain<TD>(Func<ICameraFacade, TD> f, out TD output);
        ICameraFacade Chain<TD>(Func<ICameraFacade, Task<TD>> f, out TD output);
        ICameraFacade Chain<TD>(Func<ICameraFacade, TD> f, Action<TD> output);
        ICameraFacade Chain<TD>(Func<ICameraFacade, Task<TD>> f, Action<TD> output);
        Task ChainAsync(params Func<ICameraFacade, Task>[] fs);
        Task ChainAsync<TD>(Func<ICameraFacade, Task<TD>> f, Action<TD> output);
    }
}